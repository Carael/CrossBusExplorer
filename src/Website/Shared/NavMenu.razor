@using CrossBusExplorer.Management
@using CrossBusExplorer.ServiceBus.Contracts
@using CrossBusExplorer.Website.Models
<MudNavMenu>

    <MudNavLink Href="connections" 
                Match="NavLinkMatch.All" 
                Icon="@Icons.Material.Filled.EditNote">Manage connections</MudNavLink>

    @foreach (var menuItem in _menuItems)
    {
        <MudNavGroup Title=@menuItem.Connection.Name 
                     Icon="@Icons.Material.Filled.Link" 
                     Expanded=@menuItem.IsExpanded 
                     ExpandedChanged="@(() => OnConnectionExpanded(menuItem))">
            <MudNavGroup Icon="@Icons.Filled.Folder" Title="Queues">
                @foreach (var queue in menuItem.Queues)
                {
                    <MudNavLink Href=@($"queue/{menuItem.Connection.Name}/{queue.Name}")
                                Icon="@Icons.Filled.Queue">
                        @queue.Name 
                        (@queue.ActiveMessagesCount, @queue.DeadLetterMessagesCount, @queue.InTransferMessagesCount)
                    </MudNavLink>
                }
            </MudNavGroup>
            <MudNavGroup Icon="@Icons.Filled.Folder" Title="Topics">
                @foreach (var topic in menuItem.Topics)
                {
                    <TopicNestedMenuItem Topic=@topic ServiceBusConnection=@menuItem.Connection />
                }
            </MudNavGroup>
        </MudNavGroup>
    }
</MudNavMenu>

@code {
    [Inject]
    private IQueueService QueueService { get; set; } = null!;
    [Inject]
    private ITopicService TopicService { get; set; } = null!;
    [Inject]
    private IConnectionManagement ConnectionManagement { get; set; } = null!;
    private IList<ConnectionMenuItem> _menuItems = new List<ConnectionMenuItem>();

    protected override async Task OnInitializedAsync()
    {
        _menuItems = (await ConnectionManagement.GetAsync(default)).Select(p => new ConnectionMenuItem(p)).ToList();

        await base.OnInitializedAsync();
    }
    private async Task OnConnectionExpanded(ConnectionMenuItem menuItem)
    {
        menuItem.IsExpanded = !menuItem.IsExpanded;

        if (!menuItem.Loaded)
        {
            await foreach (var queue in QueueService.GetAsync(menuItem.Connection.ConnectionString, default))
            {
                menuItem.Queues.Add(queue);
                StateHasChanged();
            }

            await foreach (var topic in TopicService.GetAsync(menuItem.Connection.ConnectionString, default))
            {
                menuItem.Topics.Add(topic);
                StateHasChanged();
            }

            menuItem.Loaded = true;
        }
    }
}