@page "/"
@page "/connections"
@using CrossBusExplorer.Management.Contracts

<PageTitle>Connections</PageTitle>

<MudTooltip Text="Add service bus connection">
    <MudIconButton Icon="@Icons.Material.Outlined.Add" OnClick="@(() => Model.OpenSaveDialog())"/>
</MudTooltip>
<MudTable Items="Model.ServiceBusConnections" Hover="true" SortLabel="Sort By" Elevation="0">
    <HeaderContent>
        <MudTh>
            Actions
        </MudTh>
        <MudTh>
            <MudTableSortLabel SortBy="new Func<ServiceBusConnection, object>(x => x.Name)">Name</MudTableSortLabel>
        </MudTh>
        <MudTh>
            <MudTableSortLabel SortBy="new Func<ServiceBusConnection, object>(x => x.Folder)">Folder</MudTableSortLabel>
        </MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Actions">
            <MudTooltip Text="View service bus connection string">
                <MudIconButton
                    Icon="@Icons.Material.Outlined.Preview"
                    OnClick="@(() => Model.ViewConnectionString(context.ConnectionString))"/>
            </MudTooltip>
            <MudTooltip Text="Edit service bus connection">
                <MudIconButton
                    Icon="@Icons.Material.Outlined.Edit"
                    OnClick="@(() => Model.OpenSaveDialog(context))"/>
            </MudTooltip>
            <MudTooltip Text="Delete service bus connection">
                <MudIconButton
                    Icon="@Icons.Material.Outlined.Delete"
                    OnClick="@(() => Model.OpenDeleteDialog(context))"/>
            </MudTooltip>
        </MudTd>
        <MudTd DataLabel="Name">@context.Name</MudTd>
        <MudTd DataLabel="Folder">@(context.Folder ?? "-")</MudTd>
    </RowTemplate>
    <PagerContent>
        <MudTablePager PageSizeOptions="new int[]{50, 100}"/>
    </PagerContent>
</MudTable>

<MudDialog @bind-IsVisible="Model.SaveDialogVisible" Options="_saveDialogOptions">
    <TitleContent>
        <MudText Typo="Typo.h6">
            <MudIcon Icon="@Icons.Material.Filled.Edit" Class="mr-3"/>Save service bus connection
        </MudText>
    </TitleContent>
    <DialogContent>
        <EditForm @ref="_editForm"
                  Model="@Model.SaveConnectionForm"
                  OnValidSubmit="Model.OnValidSaveConnectionSubmit">
            <DataAnnotationsValidator/>
            <MudGrid>
                <MudItem xs="12">
                    <MudTextField Lines="4"
                                  @bind-Value="@Model.SaveConnectionForm.ConnectionString"
                                  For="@(() => Model.SaveConnectionForm.ConnectionString)"
                                  Immediate="true"/>
                    <MudTextField @bind-Value="@Model.SaveConnectionForm.Name"
                                  For="@(() => Model.SaveConnectionForm.Name)"/>
                    <MudAutocomplete
                        T="string"
                        For="@(() => Model.SaveConnectionForm.Folder)"
                        @bind-Value="@Model.SaveConnectionForm.Folder"
                        CoerceValue="true"
                        CoerceText="true"
                        Immediate="true"
                        SearchFunc="@SearchFolder"/>
                </MudItem>
            </MudGrid>
        </EditForm>
    </DialogContent>
    <DialogActions>
        <MudButton ButtonType="ButtonType.Reset"
                   Color="Color.Default"
                   Class="px-10"
                   OnClick="@(() =>{Model.SaveDialogVisible = false;})">
            Close
        </MudButton>
        <MudButton ButtonType="ButtonType.Submit"
                   Color="Color.Success"
                   Class="px-10"
                   OnClick="@(() => Model.SubmitSaveConnectionForm(_editForm))">
            Submit
        </MudButton>
    </DialogActions>
</MudDialog>

@code{
    private EditForm _editForm;
    private readonly DialogOptions _saveDialogOptions =
        new DialogOptions
        {
            FullWidth = true,
            CloseOnEscapeKey = true
        };

    protected override void OnInitialized()
    {
        Model.PropertyChanged += (_, _) =>
        {
            StateHasChanged();
        };

        base.OnInitialized();
    }

    [Inject]
    private IConnectionsViewModel Model { get; set; }

    private Task<IEnumerable<string>> SearchFolder(string? value)
    {
        var folders = Model.Folders
            .Where(p =>
                value == null ||
                p.StartsWith(value, StringComparison.InvariantCultureIgnoreCase));

        return Task.FromResult(folders);
    }
}