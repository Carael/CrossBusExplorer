@page "/"
@page "/connections"
@using CrossBusExplorer.Management.Contracts

<PageTitle>Connections</PageTitle>

<MudTooltip Text="Add service bus connection">
    <MudIconButton Icon="@Icons.Material.Outlined.Add" OnClick="@(() => Model.OpenSaveDialog())"/>
</MudTooltip>

<MudContainer>
    <MudDropContainer T="ServiceBusConnection"
                      Items="Model.ServiceBusConnections"a
                      ItemsSelector="@((item, dropzone) => item.Folder.EqualsInvariantIgnoreCase(dropzone))"
                      ItemDropped="OnServiceBusConnectionFolderDropped"
                      drag
                      Class="d-flex flex-wrap flex-grow-1">
        <ChildContent>

            @foreach (var folder in Model.Folders)
            {
                <MudGrid>
                    <MudItem xs="1">
                        <MudIconButton Icon="@Icons.Filled.ArrowUpward"></MudIconButton>
                        <MudIconButton Icon="@Icons.Filled.ArrowDownward"></MudIconButton>
                        <MudIconButton></MudIconButton>
                    </MudItem>
                    <MudItem xs="11">
                        <MudGrid>
                            <MudItem xs="12">
                                <MudText Typo="Typo.h6">Folder: @folder</MudText>
                            </MudItem>
                            <MudItem xs="12">
                                @* <MudPaper Class="ma-4 flex-grow-1"> *@
                                @*     <MudList Clickable="true" Class="d-flex flex-column mud-height-full"> *@
                                @*         <MudListSubheader>Drop Zone @folder</MudListSubheader> *@
                                <MudDropZone T="ServiceBusConnection" Identifier="@folder" Style="min-height: 50px;" Class="flex-grow-1" AllowReorder="true"/>
                                @*     </MudList> *@
                                @* </MudPaper> *@
                            </MudItem>
                        </MudGrid>
                    </MudItem>

                </MudGrid>
            }
        </ChildContent>
        <ItemRenderer>

            <MudGrid>
                <MudItem xs="3">
                    <MudTooltip Text="View service bus connection string">
                        <MudIconButton
                            DisableRipple="true"
                            Icon="@Icons.Material.Outlined.Preview"
                            OnClick="@(() => Model.ViewConnectionString(context.ConnectionString))"/>
                    </MudTooltip>
                    <MudTooltip Text="Edit service bus connection">
                        <MudIconButton
                            DisableRipple="true"
                            Icon="@Icons.Material.Outlined.Edit"
                            OnClick="@(() => Model.OpenSaveDialog(context))"/>
                    </MudTooltip>
                    <MudTooltip Text="Delete service bus connection">
                        <MudIconButton
                            DisableRipple="true"
                            Icon="@Icons.Material.Outlined.Delete"
                            OnClick="@(() => Model.OpenDeleteDialog(context))"/>
                    </MudTooltip>
                </MudItem>
                <MudItem xs="3">
                    @context.Name
                </MudItem>
                <MudItem xs="6">
                    @context.FullyQualifiedName
                </MudItem>
            </MudGrid>
            <MudDivider/>

            @* <tr> *@
            @*     <td> *@
            @*         <MudTooltip Text="View service bus connection string"> *@
            @*             <MudIconButton *@
            @*                 DisableRipple="true" *@
            @*                 Icon="@Icons.Material.Outlined.Preview" *@
            @*                 OnClick="@(() => Model.ViewConnectionString(context.ConnectionString))"/> *@
            @*         </MudTooltip> *@
            @*         <MudTooltip Text="Edit service bus connection"> *@
            @*             <MudIconButton *@
            @*                 DisableRipple="true" *@
            @*                 Icon="@Icons.Material.Outlined.Edit" *@
            @*                 OnClick="@(() => Model.OpenSaveDialog(context))"/> *@
            @*         </MudTooltip> *@
            @*         <MudTooltip Text="Delete service bus connection"> *@
            @*             <MudIconButton *@
            @*                 DisableRipple="true" *@
            @*                 Icon="@Icons.Material.Outlined.Delete" *@
            @*                 OnClick="@(() => Model.OpenDeleteDialog(context))"/> *@
            @*         </MudTooltip> *@
            @*     </td> *@
            @*     <td> *@
            @*         @context.Name *@
            @*     </td> *@
            @* </tr> *@
        </ItemRenderer>
    </MudDropContainer>
</MudContainer>

<MudDialog @bind-IsVisible="Model.SaveDialogVisible" Options="_saveDialogOptions">
    <TitleContent>
        <MudText Typo="Typo.h6">
            <MudIcon Icon="@Icons.Material.Filled.Edit" Class="mr-3"/>Save service bus connection
        </MudText>
    </TitleContent>
    <DialogContent>
        <EditForm @ref="_editForm"
                  Model="@Model.SaveConnectionForm"
                  OnValidSubmit="Model.OnValidSaveConnectionSubmit">
            <DataAnnotationsValidator/>
            <MudGrid>
                <MudItem xs="12">
                    <MudTextField Lines="4"
                                  @bind-Value="@Model.SaveConnectionForm.ConnectionString"
                                  For="@(() => Model.SaveConnectionForm.ConnectionString)"
                                  Immediate="true"/>
                    <MudTextField @bind-Value="@Model.SaveConnectionForm.Name"
                                  For="@(() => Model.SaveConnectionForm.Name)"/>
                    <MudAutocomplete
                        T="string"
                        For="@(() => Model.SaveConnectionForm.Folder)"
                        @bind-Value="@Model.SaveConnectionForm.Folder"
                        CoerceValue="true"
                        CoerceText="true"
                        SelectValueOnTab="true"
                        Dense="true"
                        Immediate="true"
                        ResetValueOnEmptyText="true"
                        SearchFunc="@SearchFolder"/>
                </MudItem>
            </MudGrid>
        </EditForm>
    </DialogContent>
    <DialogActions>
        <MudButton ButtonType="ButtonType.Reset"
                   Color="Color.Default"
                   Class="px-10"
                   OnClick="@(() =>{Model.SaveDialogVisible = false;})">
            Close
        </MudButton>
        <MudButton ButtonType="ButtonType.Submit"
                   Color="Color.Success"
                   Class="px-10"
                   OnClick="@(() => Model.SubmitSaveConnectionForm(_editForm))">
            Submit
        </MudButton>
    </DialogActions>
</MudDialog>

@code{
    private EditForm _editForm;
    private readonly DialogOptions _saveDialogOptions =
        new DialogOptions
        {
            FullWidth = true,
            CloseOnEscapeKey = true
        };

    protected override void OnInitialized()
    {
        Model.PropertyChanged += (_, _) =>
        {
            StateHasChanged();
        };

        base.OnInitialized();
    }

    [Inject]
    private IConnectionsViewModel Model { get; set; }

    private Task<IEnumerable<string>> SearchFolder(string? value)
    {
        var folders = Model.Folders
            .Where(p =>
                value == null ||
                p.StartsWith(value, StringComparison.InvariantCulture));

        return Task.FromResult(folders);
    }

    private void OnServiceBusConnectionFolderDropped(MudItemDropInfo<ServiceBusConnection> droppedItem)
    {
        droppedItem.Item.UpdateFolder(droppedItem.DropzoneIdentifier);
    }
}