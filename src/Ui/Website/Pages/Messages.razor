@using CrossBusExplorer.ServiceBus.Contracts.Types
@using CrossBusExplorer.Website.Models
@using CrossBusExplorer.Website.Models.Validators
@using CrossBusExplorer.ServiceBus.Contracts
@inherits LayoutComponentBase
<MudDialog @bind-IsVisible="_isDialogVisible">
    <TitleContent>
        <MudText Typo="Typo.h6">
            Receive @QueueOrTopicName @SubscriptionName messages
        </MudText>
    </TitleContent>
    <DialogContent>
        <MudPaper Elevation="3">
            <MudForm @ref="@form" Model="@_model" Validation="@(_validator.ValidateValue)" ValidationDelay="0">

                <MudField Variant="Variant.Outlined" Label="Queue type">
                    <MudRadioGroup @bind-SelectedOption="_model.SubQueue"
                                   For="@(() => _model.SubQueue)">
                        <MudRadio Dense="true"
                                  Size="Size.Small"
                                  Option="SubQueue.None">
                            Active messages
                        </MudRadio>
                        <MudRadio Dense="true"
                                  Size="Size.Small"
                                  Option="SubQueue.DeadLetter">
                            Dead letter
                        </MudRadio>
                        <MudRadio Dense="true"
                                  Size="Size.Small"
                                  Option="SubQueue.TransferDeadLetter">
                            Transfer dead letter
                        </MudRadio>
                    </MudRadioGroup>
                </MudField>

                <MudField Variant="Variant.Outlined" Label="Receive mode">
                    <MudRadioGroup @bind-SelectedOption="_model.Mode"
                                   For="@(() => _model.Mode)">
                        <MudRadio Dense="true"
                                  Size="Size.Small"
                                  Option="ReceiveMode.ReceiveAndDelete">
                            Receive and delete
                        </MudRadio>
                        <MudRadio Dense="true"
                                  Size="Size.Small"
                                  Option="ReceiveMode.PeekLock">
                            Peek lock
                        </MudRadio>
                    </MudRadioGroup>
                </MudField>

                <MudField Variant="Variant.Outlined" Label="Message count">
                    <MudRadioGroup @bind-SelectedOption="_model.Type"
                                   For="@(() => _model.Type)">
                        <MudRadio Dense="true"
                                  Size="Size.Small"
                                  Option="ReceiveType.All">
                            @ReceiveType.All
                        </MudRadio>
                        <MudRadio Dense="true"
                                  Size="Size.Small"
                                  Option="ReceiveType.ByCount">
                            @ReceiveType.ByCount
                        </MudRadio>
                    </MudRadioGroup>
                    <MudNumericField @bind-Value="_model.MessagesCount"
                                     Disabled="@(_model.Type == ReceiveType.All)"
                                     For="@(() => _model.MessagesCount)"
                                     Class="px-0 ma-0 pa-0 py-0"
                                     Min="0"
                                     Immediate="true"
                                     HelperText="Messages count">
                    </MudNumericField>
                    <MudNumericField @bind-Value="_model.FromSequenceNumber"
                                     For="@(() => _model.FromSequenceNumber)"
                                     Disabled="@(_model.Type == ReceiveType.All || _model.Mode == ReceiveMode.ReceiveAndDelete)"
                                     Class="px-0 ma-0 pa-0 py-0"
                                     Min="0"
                                     Immediate="true"
                                     HelperText="From sequence number">
                    </MudNumericField>
                </MudField>

                <MudButton ButtonType="ButtonType.Button"
                           Color="Color.Success"
                           OnClick="@(() => OnSubmit())"
                           Class="px-10">
                    Receive
                </MudButton>
                <MudButton ButtonType="ButtonType.Button"
                           Color="Color.Success"
                           OnClick="@(() => { _isDialogVisible = false; })"
                           Class="px-10">
                    Close
                </MudButton>
            </MudForm>
        </MudPaper>
    </DialogContent>
</MudDialog>

@code {
    [Parameter]
    public string ConnectionName { get; set; }
    [Parameter]
    public string QueueOrTopicName { get; set; }
    [Parameter]
    public string? SubscriptionName { get; set; }

    [Inject]
    private IMessageService _messageService { get; set; }

    IList<Message> _messages;

    bool _isDialogVisible;
    MudForm form;
    ReceiveMessageFormValidator _validator = new ReceiveMessageFormValidator();

    ReceiveMessagesForm _model = new ReceiveMessagesForm
    {
        MessagesCount = 10
    };

    protected override Task OnInitializedAsync()
    {
        _isDialogVisible = true;
        StateHasChanged();

        return base.OnInitializedAsync();
    }

    async Task OnSubmit()
    {
        await form.Validate();

        if (form.IsValid)
        {
            _messages = await LoadMessagesAsync();
        }
    }

    async Task<IList<Message>> LoadMessagesAsync()
    {
        return (await _messageService.GetMessagesAsync(
            ConnectionName,
            QueueOrTopicName,
            SubscriptionName,
            _model.SubQueue,
            _model.Mode,
            _model.Type,
            _model.MessagesCount,
            _model.FromSequenceNumber,
            default)).ToList();
    }

    private void OnReceiveModeChanged()
    {
        if (_model.Mode == ReceiveMode.ReceiveAndDelete)
        {
            _model.FromSequenceNumber = null;
        }
    }

    private void OnReceiveTypeChange()
    {
        if (_model.Type == ReceiveType.All)
        {
            _model.MessagesCount = null;
        }
        else
        {
            _model.MessagesCount = 10;
        }
    }
}