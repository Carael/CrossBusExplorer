@using CrossBusExplorer.Website.Models
@using System.Web

@if (TopicSubscriptionsModel.Topic.IsFolder)
{
    <MudNavGroup Icon="@Icons.Filled.FilePresent" ExpandedChanged="OnTopicExpandChange" Expanded="TopicSubscriptionsModel.TopicExpanded" Title=@TopicSubscriptionsModel.Topic.Name>
        @if (TopicSubscriptionsModel.TopicExpanded)
        {
            @foreach (var model in TopicSubscriptionsModel.ChildrenModels)
            {
                <TopicNestedMenuItem TopicSubscriptionsModel="@model" ConnectionName="@ConnectionName"/>
            }
        }
    </MudNavGroup>
}
else
{
    <MudNavGroup Icon="@Icons.Filled.FilePresent" Title=@TopicSubscriptionsModel.Topic.Name IconColor="Color.Success">
        <MudNavLink Match="NavLinkMatch.All"
                    Href=@($"topic/{ConnectionName}/{HttpUtility.UrlEncode(TopicSubscriptionsModel.Topic.FullName)}")
                    Icon="@Icons.Filled.Topic">
            View topic details
        </MudNavLink>
        <MudNavGroup Icon="@Icons.Filled.Subscriptions"
                     Title="Subscriptions"
                     @onclick="@(OnSubscriptionsExpanded)">

            @if (TopicSubscriptionsModel.IsLoading)
            {
                <MudProgressLinear Color="Color.Primary" Indeterminate="true" Class="my-7"/>
            }
            @if (TopicSubscriptionsModel.Loaded)
            {
                <MudNavLink Match="NavLinkMatch.All"
                            Href=@($"new-subscription/{ConnectionName}/{HttpUtility.UrlEncode(TopicSubscriptionsModel.Topic.FullName)}")
                            Icon="@Icons.Filled.Add">
                    Create new subscription
                </MudNavLink>

                @foreach (var subscription in TopicSubscriptionsModel.Subscriptions)
                {
                    <MudNavLink Match="NavLinkMatch.All"
                                Href=@($"subscription/{ConnectionName}/{HttpUtility.UrlEncode(TopicSubscriptionsModel.Topic.FullName)}/{HttpUtility.UrlEncode(subscription.SubscriptionName)}")
                                Icon="@Icons.Filled.FormatLineSpacing">
                        <MudTooltip Placement="Placement.Right" Text="@($"{subscription.SubscriptionName} (Active messages: {subscription.ActiveMessagesCount}, " + 
                                            $"Dead letters: {subscription.DeadLetterMessagesCount}, " + 
                                            $"Transfer messages: {subscription.TransferMessagesCount}")">
                            @subscription.SubscriptionName (@subscription.ActiveMessagesCount,
                            @subscription.DeadLetterMessagesCount,
                            @subscription.TransferMessagesCount)
                        </MudTooltip>
                    </MudNavLink>
                }
            }
        </MudNavGroup>
    </MudNavGroup>
}

@code {
    [Inject]
    public INavigationViewModel Model { get; set; }
    [Parameter]
    public TopicSubscriptionsModel TopicSubscriptionsModel { get; set; } = null!;
    [Parameter]
    public string ConnectionName { get; set; } = null!;

    protected override void OnInitialized()
    {
        Model.PropertyChanged += (_, _) =>
        {
            StateHasChanged();
        };

        TopicSubscriptionsModel.ShouldRender = true;
    }

    protected override bool ShouldRender() => TopicSubscriptionsModel.ShouldRender;

    private async Task OnSubscriptionsExpanded()
    {
        TopicSubscriptionsModel.ShouldRender = false;
        await Model.LoadSubscriptionsAsync(ConnectionName, TopicSubscriptionsModel);
        TopicSubscriptionsModel.ShouldRender = true;
    }
    private void OnTopicExpandChange()
    {
        TopicSubscriptionsModel.TopicExpanded = !TopicSubscriptionsModel.TopicExpanded;
    }
}