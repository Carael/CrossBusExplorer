@using CrossBusExplorer.Website.Models
@inherits LayoutComponentBase
@inject IConnectionsViewModel _connectionsViewModel
@inject ISettingsService SettingsService

<MudThemeProvider Theme="_customTheme" @bind-IsDarkMode="@_userSettings.IsDarkMode"/>
<MudDialogProvider/>
<MudSnackbarProvider/>

<ErrorBoundary @ref="@_errorBoundary">
  <ChildContent>

    <MudLayout>
      <MudMainContent Style="padding-top: 0; position: fixed; height: 100%; width: 100%; z-index: 0" Class="d-flex flex-grow-1">
        <MudDrawerContainer>
          <MudDrawer Fixed="true" Elevation="1" Variant="@DrawerVariant.Mini" OpenMiniOnHover="true">
            <MudNavMenu>
              <MudTooltip Placement="Placement.Right" Text="Connections">
                <MudIconButton Href="connections" Icon="@Icons.Material.Outlined.EditNote"/>
              </MudTooltip>
              <MudTooltip Placement="Placement.Right" Text="Toggle side menu">
                <MudIconButton Icon="@Icons.Material.Outlined.AccountTree" Color="Color.Inherit" OnClick="@((_) => DrawerToggle())"/>
              </MudTooltip>
              <MudTooltip Placement="Placement.Right" Text="Reload menu">
                <MudIconButton Icon="@Icons.Material.Outlined.Cached"
                               Color="Color.Inherit"
                               Disabled="@_navigationViewModel.IsLoading"
                               OnClick="@((_) => _navigationViewModel.ReloadMenu())"/>
              </MudTooltip>
              <MudTooltip Placement="Placement.Right" Text="Change theme">
                <MudMenu Icon="@Icons.Filled.MoreVert" Color="Color.Inherit">
                  <MudMenuItem OnClick="@(() => ChangeDarkModeInternal(false))">Normal</MudMenuItem>
                  <MudMenuItem OnClick="@(() => ChangeDarkModeInternal(true))">Dark</MudMenuItem>
                </MudMenu>
              </MudTooltip>
              <Jobs></Jobs>
            </MudNavMenu>
          </MudDrawer>
          @if (_drawerOpen)
          {
            <MudContainer MaxWidth="MaxWidth.ExtraSmall" Class="mud-height-full overflow-auto">
              <ServiceBusNavMenu/>
            </MudContainer>
          }
        </MudDrawerContainer>

        <MudContainer>
          @Body
        </MudContainer>
      </MudMainContent>
    </MudLayout>

  </ChildContent>
  <ErrorContent>
    <MudLayout>
      <MudAlert Severity="Severity.Error" Variant="Variant.Outlined">@context</MudAlert>
      <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="() => { _errorBoundary?.Recover(); }">Recover</MudButton>
    </MudLayout>
  </ErrorContent>
</ErrorBoundary>


@code {
  private ErrorBoundary? _errorBoundary;
  private bool _isOpen;
  private UserSettings _userSettings = new UserSettings();
  bool _drawerOpen = true;
  public bool DarkMode { get; set; }

  [Inject]
  private INavigationViewModel _navigationViewModel { get; set; }

  [Inject]
  private MudTheme _customTheme { get; set; }

  protected override void OnParametersSet()
  {
    _errorBoundary?.Recover();
  }

  protected override async Task OnInitializedAsync()
  {
    await _connectionsViewModel.InitializeAsync(default);
  }

  protected override async Task OnAfterRenderAsync(bool firstRender)
  {
    if (firstRender)
    {
      _userSettings = await SettingsService.GetAsync(default);
      StateHasChanged();
    }
  }

  private async Task ChangeDarkMode(bool isDarkMode)
  {
    _userSettings.IsDarkMode = isDarkMode;
    StateHasChanged();

    await SettingsService.SaveAsync(_userSettings, default);
  }

  private async Task ChangeDarkModeInternal(bool isDarkMode)
  {
    DarkMode = isDarkMode;
    await ChangeDarkMode(isDarkMode);
  }

  void DrawerToggle()
  {
    _drawerOpen = !_drawerOpen;
  }
}
