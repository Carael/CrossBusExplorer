@using CrossBusExplorer.Website.Models
@inherits LayoutComponentBase
@inject IConnectionsViewModel _connectionsViewModel
@inject IUserSettingsService _userSettingsService


<MudThemeProvider Theme="CustomTheme" @bind-IsDarkMode="@_userSettings.IsDarkMode" />
<MudDialogProvider />
<MudSnackbarProvider />

<MudLayout>
    <MudMainContent Style="padding-top: 0; position: fixed; height: 100%; width: 100%; z-index: 0" Class="d-flex flex-grow-1">
        <SidePanel ChangeDarkMode="@((value) => ChangeDarkMode(value))">
            <ServiceBusNavMenu/>
        </SidePanel>
        <MudContainer Class="flex-shrink-1" Style="padding-top: 24px">
            <ErrorBoundary @ref="@_errorBoundary">
                <ChildContent>
                    @Body
                </ChildContent>
                <ErrorContent>
                    <p>Exception: @context.Message</p>
                </ErrorContent>
            </ErrorBoundary>
        </MudContainer>
    </MudMainContent>
</MudLayout>


@code {
    private ErrorBoundary? _errorBoundary;
    private bool _isOpen;
    private UserSettings _userSettings = new UserSettings();
    
    private MudTheme CustomTheme = new()
        {
            Palette = new Palette
            {
                Primary = Colors.Blue.Darken2
            },
            PaletteDark = new PaletteDark
            {
                Primary = Colors.Grey.Darken4
            }
        };

    protected override void OnParametersSet()
    {
        _errorBoundary?.Recover();
    }

    protected override async Task OnInitializedAsync()
    {
        await _connectionsViewModel.InitializeAsync(default);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _userSettings = await _userSettingsService.GetAsync(default);
            StateHasChanged();
        }
    }

    private async Task ChangeDarkMode(bool isDarkMode)
    {
        _userSettings.IsDarkMode = isDarkMode;
        StateHasChanged();

        await _userSettingsService.SaveAsync(_userSettings, default);
    }
}