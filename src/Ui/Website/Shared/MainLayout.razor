@using CrossBusExplorer.Website.Models
@inherits LayoutComponentBase
@inject IConnectionsViewModel _connectionsViewModel
@inject IUserSettingsService _userSettingsService


<MudThemeProvider Theme="CustomTheme" @bind-IsDarkMode="@_userSettings.IsDarkMode" />
<MudDialogProvider/>
<MudSnackbarProvider/>

<MudLayout>
    <MudAppBar Elevation="0" Dense="true" Color="Color.Secondary">
        <MudIconButton Icon="@Icons.Material.Filled.Menu"
                       Color="Color.Inherit"
                       Edge="Edge.Start"
                       OnClick="@((e) => DrawerToggle())"/>
        <MudSpacer/>
        <MudText Typo="Typo.h6">CrossBusExplorer</MudText>
        <MudSpacer />
        <Jobs/>
        <MudTooltip Text="Change theme">
            <MudMenu Icon="@Icons.Filled.MoreVert" Color="Color.Inherit">
                <MudMenuItem OnClick="@(() => ChangeDarkMode(false))">Normal</MudMenuItem>
                <MudMenuItem OnClick="@(() => ChangeDarkMode(true))">Dark</MudMenuItem>
            </MudMenu>
        </MudTooltip>
    </MudAppBar>
    <MudDrawer @bind-Open="_drawerOpen" Elevation="1" ClipMode="DrawerClipMode.Always" Width="25%">
        <ServiceBusNavMenu/>
    </MudDrawer>
    <MudMainContent>
        <MudContainer MaxWidth="MaxWidth.Large" Class="my-2 pt-2">
            <ErrorBoundary @ref="@_errorBoundary">
                <ChildContent>
                    @Body
                </ChildContent>
                <ErrorContent>
                    <p>Exception: @context.Message</p>
                </ErrorContent>
            </ErrorBoundary>
        </MudContainer>
    </MudMainContent>
</MudLayout>


@code {
    private ErrorBoundary? _errorBoundary;
    bool _drawerOpen = true;
    private bool _isOpen;
    private UserSettings _userSettings = new UserSettings();

    private MudTheme CustomTheme = new()
    {
        Palette = new Palette
        {
            Secondary = Colors.Blue.Darken2
        },
        PaletteDark = new PaletteDark
        {
            Secondary = Colors.Grey.Darken4
        }
    };

    void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }

    protected override void OnParametersSet()
    {
        _errorBoundary?.Recover();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await _connectionsViewModel.InitializeAsync(default);
            _userSettings = await _userSettingsService.GetAsync(default);
            StateHasChanged();
        }
    }
    
    private async Task ChangeDarkMode(bool isDarkMode)
    {
        _userSettings.IsDarkMode = isDarkMode;
        StateHasChanged();

        await _userSettingsService.SaveAsync(_userSettings, default);
    }
}