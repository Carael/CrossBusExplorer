@using CrossBusExplorer.ServiceBus.Contracts.Types
@using CrossBusExplorer.Management
@using CrossBusExplorer.Management.Contracts
@using CrossBusExplorer.ServiceBus.Contracts
@using CrossBusExplorer.Website.Models

@if (Subscription.Topic.IsFolder)
{
    <MudNavGroup Icon="@Icons.Filled.Folder" ExpandedChanged="OnTopicExpandChange" Expanded="_topicExpanded" Title=@Subscription.Topic.Name>
        @if (_topicExpanded)
        {
            @foreach (var model in Subscription.ChildrenModels)
            {
                <TopicNestedMenuItem Subscription="@model" ConnectionName="@ConnectionName"/>
            }
        }
    </MudNavGroup>
}
else
{
    <MudNavGroup Icon="@Icons.Filled.Folder" Title=@Subscription.Topic.FullName>
        <MudNavLink Href=@($"topic/{ConnectionName}/{Subscription.Topic.FullName}")
                    Icon="@Icons.Filled.Topic">
            View topic details
        </MudNavLink>
        <MudNavGroup Icon="@Icons.Filled.Add"
                     Title="Subscriptions"
                     @onclick="@(OnSubscriptionsExpanded)">

            @if (Subscription.IsLoading)
            {
                <MudProgressLinear Color="Color.Primary" Indeterminate="true" Class="my-7"/>
            }
            @if (Subscription.Subscriptions.Count == 0 && Subscription.Loaded)
            {
                <MudNavLink Disabled="true">No subscriptions</MudNavLink>
            }
            else
            {
                @foreach (var subscription in Subscription.Subscriptions)
                {
                    <MudTooltip Text="@($"{subscription.Name} ({subscription.ActiveMessagesCount}, " +
                                        $"{subscription.DeadLetterMessagesCount}, " +
                                        $"{subscription.TransferMessagesCount}")">
                        <MudNavLink Href=@($"subscription/{ConnectionName}/{Subscription.Topic.Name}/{subscription.Name}")
                                    Icon="@Icons.Filled.FormatLineSpacing">
                            @subscription.Name (@subscription.ActiveMessagesCount, 
                            @subscription.DeadLetterMessagesCount,
                            @subscription.TransferMessagesCount)
                        </MudNavLink>
                    </MudTooltip>
                }
            }
        </MudNavGroup>
    </MudNavGroup>
}

@code {
    [Inject] 
    public INavigationViewModel Model { get; set; }
    [Parameter]
    public TopicSubscriptionsModel Subscription { get; set; } = null!;

    [Parameter]
    public string ConnectionName { get; set; } = null!;

    private bool _topicExpanded;
    private bool _shouldRender;

    protected override void OnInitialized()
    {
        Model.PropertyChanged += (_, _) =>
        {
            StateHasChanged();
        };

        _shouldRender = true;
    }

    protected override bool ShouldRender() => _shouldRender;

    private async Task OnSubscriptionsExpanded()
    {
        _shouldRender = false;
        await Model.LoadSubscriptionsAsync(ConnectionName, Subscription);
        _shouldRender = true;
    }
    private void OnTopicExpandChange()
    {
        _topicExpanded = !_topicExpanded;
    }
}