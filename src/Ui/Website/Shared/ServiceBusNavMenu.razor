@using CrossBusExplorer.Management
@using CrossBusExplorer.Management.Contracts
@using CrossBusExplorer.ServiceBus.Contracts
@using CrossBusExplorer.Website.Models
@using System.Security.Cryptography
@using CrossBusExplorer.Website.ViewModels

<MudNavMenu>
    <MudNavLink Href="connections"
                Match="NavLinkMatch.All"
                Icon="@Icons.Material.Filled.EditNote">
        Manage connections
    </MudNavLink>

    @foreach (var menuItem in ConnectionsViewModel.ServiceBusConnections)
    {
        <MudNavLink>@menuItem.Name</MudNavLink>
    }
</MudNavMenu>

@code {
    [Inject]
    private IQueueService QueueService { get; set; } = null!;
    [Inject]
    private ITopicService TopicService { get; set; } = null!;
    [Inject]
    private IConnectionsViewModel ConnectionsViewModel { get; set; }
    private IList<ConnectionMenuItem> _menuItems = new List<ConnectionMenuItem>();

    protected override async Task OnInitializedAsync()
    {
        ConnectionsViewModel.PropertyChanged += (sender, e) =>
        {
            StateHasChanged();
        };
        _menuItems = (ConnectionsViewModel.ServiceBusConnections).Select(p => new ConnectionMenuItem(p)).ToList();
    }

    private async Task OnQueuesExpanded(ConnectionMenuItem menuItem)
    {
        if (!menuItem.QueuesLoaded && !menuItem.LoadingQueues)
        {
            menuItem.LoadingQueues = true;
            await foreach (var queue in QueueService.GetAsync(menuItem.Connection.Name, default))
            {
                menuItem.Queues.Add(queue);
                StateHasChanged();
            }
            menuItem.LoadingQueues = false;
            
            menuItem.QueuesLoaded = true;
        }
    }
    
    private async Task OnTopicsExpanded(ConnectionMenuItem menuItem)
    {
        if (!menuItem.TopicsLoaded && !menuItem.LoadingTopics)
        {
            menuItem.LoadingTopics = true;

            await foreach (var topic in TopicService.GetAsync(menuItem.Connection.Name, default))
            {
                menuItem.Topics.Add(topic);
                StateHasChanged();
            }

            menuItem.LoadingTopics = false;
            menuItem.TopicsLoaded = true;
        }
    }
}