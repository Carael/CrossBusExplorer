@using CrossBusExplorer.Management
@using CrossBusExplorer.Management.Contracts
@using CrossBusExplorer.ServiceBus.Contracts
@using CrossBusExplorer.Website.Models
@using System.Security.Cryptography

<MudNavMenu>
    <MudNavLink Href="connections"
                Match="NavLinkMatch.All"
                Icon="@Icons.Material.Filled.EditNote">
        Manage connections
    </MudNavLink>

    @foreach (var menuItem in MainViewModel.MenuItems)
    {
        <MudNavGroup Title=@menuItem.ConnectionName
                     Icon="@Icons.Material.Filled.Link">

            <MudNavGroup Icon="@Icons.Filled.Folder" 
                         Title="Queues"
                         @onclick="@(() => OnQueuesExpanded(menuItem))">
                @if (menuItem.LoadingQueues)
                {
                    <MudProgressLinear Color="Color.Primary" Indeterminate="true" Class="my-7" />
                }
                @foreach (var queue in menuItem.Queues)
                {
                    <MudNavLink Href=@($"queue/{menuItem.ConnectionName}/{queue.Name}")
                                Icon="@Icons.Filled.Queue">
                        @queue.Name
                        (@queue.ActiveMessagesCount, @queue.DeadLetterMessagesCount, @queue.InTransferMessagesCount)
                    </MudNavLink>
                }
            </MudNavGroup>

            <MudNavGroup Icon="@Icons.Filled.Folder"
                         Title="Topics"
                         @onclick="@(() => OnTopicsExpanded(menuItem))">
                
                @if (menuItem.LoadingTopics)
                {
                    <MudProgressLinear Color="Color.Primary" Indeterminate="true" Class="my-7"/>
                }
                @foreach (var topic in menuItem.Topics)
                {
                    <TopicNestedMenuItem Topic=@topic ConnectionName=@menuItem.ConnectionName/>
                }
            </MudNavGroup>
        </MudNavGroup>
    }
</MudNavMenu>

@code {
    [Inject]
    private IMainViewModel MainViewModel { get; set; }

    protected override async Task OnInitializedAsync()
    {
        MainViewModel.PropertyChanged += (sender, e) =>
        {
            StateHasChanged();
        };

        await base.OnInitializedAsync();
    }
    
    private async Task OnQueuesExpanded(ConnectionMenuItem menuItem)
    {
        await MainViewModel.LoadQueues(menuItem, default);
    }
    
    private async Task OnTopicsExpanded(ConnectionMenuItem menuItem)
    {
        MainViewModel.LoadTopics(menuItem, default);
    }
}